* ERC-721 Non-fungible token
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#erc-721-non-fungible-token][ERC-721 Non-fungible token]]
- [[#design-and-implementation][Design and implementation]]
  - [[#owner-transfer][Owner transfer]]
    - [[#events][Events]]
    - [[#views][Views]]
    - [[#public-functions][Public functions]]
  - [[#approved-address-for-a-specific-nft][Approved address for a specific NFT]]
    - [[#event][Event]]
    - [[#views][Views]]
    - [[#public-functions][Public functions]]
  - [[#approved-operator-for-all-owner-nfts][Approved operator for all owner NFTs]]
    - [[#events][Events]]
    - [[#views][Views]]
    - [[#public-functions][Public functions]]
  - [[#mint-and-burn-nfts][Mint and burn NFTs]]
    - [[#internal-functions][Internal functions]]
- [[#testing-and-usage][Testing and usage]]
  - [[#testing-nft-contract][Testing NFT contract]]
:END:

** Concepts and purpose

*** ERC-721 Non-fungible token

[[https://eips.ethereum.org/EIPS/eip-721][ERC-721 Non-fungible token standard]]

- ERC-721 Non-fungible token :: The ERC-721 Non-fungible token standard
  describes an interface for implementing the transfer and the ownership
  recording of non-fungible tokens NTFs. Each NFT represents a distinguishable
  unique asset. Each NTF is unique and non-interchangeable with other NTFs. Each
  NFT requires a dedicated record for ownership tracking of the NFT. The NFT
  standard describes the transfer of NFTs directly by owners, the approval by
  owners or operators of approved addresses to manage specific NFTs, and the
  approval by owners of possibly multiple operators to manage all owner NFTs

** Design and implementation

*** Owner transfer

**** Events

- Transfer :: The =Transfer= event is emitted on a successful transfer on an NFT
  from the owner to a recipient. The event is also emitted when a new NFT is
  minted (the owner address is zero), and when an existing NFT is burned (the
  recipient address is zero)
  #+BEGIN_SRC solidity
event Transfer(address indexed own, address indexed rcp, uint tid);
  #+END_SRC

**** Views

- NTF owner :: The =ownerOf= view returns the owner address of an NFT identified
  by a token ID. A zero address is returned for a non-existing token
  #+BEGIN_SRC solidity
function ownerOf(uint tid) external view returns(address own);
  #+END_SRC

- Owner balance :: The =balanceOf= view returns the number of NFTs owned by an
  address
  #+BEGIN_SRC solidity
function balanceOf(address own) external view returns (uint tokNum);
  #+END_SRC

**** Public functions

- Unsafe transfer :: The =transferFrom= function transfers an NFT identified by
  a token ID from the owner to a recipient. Either the owner or an approved
  address for this specific NFT, or an approved operator for all owner NFTs can
  perform a transfer. The sender is responsible to confirm that the recipient is
  capable of receiving NTFs, otherwise the NFT may be permanently lost
  #+BEGIN_SRC solidity
function transferFrom(address own, address rcp, uint tid) external payable;
  #+END_SRC

- Safe transfer :: The =safeTransferFrom= function performs an unsafe transfer
  of an NFT identified by a token ID and calls the =onERC721Received= function
  on the recipient contract to confirm the successful transfer. The
  =onERC721Received= function must return the selector of the =onERC721Received=
  function, otherwise the transfer fails to prevent a potential loss of NFTs
  sent to recipient contracts that do not implement the NFT recipient interface.
  The =safeTransferFrom= function emits the =Transfer= event
  #+BEGIN_SRC solidity
contract NFTRecipient is INFTRecipient {
  function onERC721Received(address, address, uint, bytes memory)
    external pure returns (bytes4) {
    return NFTRecipient.onERC721Received.selector;
  }
}

function safeTransferFrom(
  address own, address rcp, uint tid, bytes memory data
) external payable;
function safeTransferFrom(address own, address rcp, uint tid) external payable;
  #+END_SRC

*** Approved address for a specific NFT

**** Event

- Approval :: The =Approval= event is emitted when the owner of an approved
  operator approve an approved address for a specific NFT identified with a
  token ID
  #+BEGIN_SRC solidity
event Approval(address indexed own, address indexed apr, uint tid);
  #+END_SRC

**** Views

- Approved address for specific NFT :: The =getApproved= view returns an
  approved address for an NFT identified with a token ID
  #+BEGIN_SRC solidity
function getApproved(uint tid) external view returns (address apr);
  #+END_SRC

**** Public functions

- Approve address for specific NFT :: The =approve= function allows the owner or
  an approved operator for all owner NTFs to approve an approved address to
  transfer a specific NFT owned by the owner. The =approve= function emits the
  =Approval= event
  #+BEGIN_SRC solidity
function approve(address apr, uint tid) external;
  #+END_SRC

*** Approved operator for all owner NFTs

**** Events

- Approval for all :: The =ApprovalForAll= event is emitted when the owner
  approves or removes the approval for an operator to manage all owner NTFs
  #+BEGIN_SRC solidity
event ApprovalForAll(address  indexed own, address indexed opr, bool allow);
  #+END_SRC

**** Views

- Approved operator for all owner NFTs :: The =isApprovedForAll= view returns
  whether an operator is approved by the owner to manage all owner NTFs
  #+BEGIN_SRC solidity
function isApprovedForAll(address own, address opr)
  external view returns (bool allow);
  #+END_SRC

**** Public functions

- Approve operator for all owner NFTs :: The =setApprovalForAll= function allows
  an owner with a non-zero balance to approve an operator to manage all owner
  NTFs. The function also allows the owner to remove the approval from an
  operator. Multiple operators can be approved to manage NTFs of the same owner.
  The =setApprovalForAll= function emits the =ApprovalForAll= event
  #+BEGIN_SRC solidity
function setApprovalForAll(address opr, bool allow) external;
  #+END_SRC

*** Mint and burn NFTs

**** Internal functions

- Mint :: The =mint= function allows only the minter to create a new NFT and
  transfer the NFT to a recipient. The =mint= function emits the =Transfer=
  event with the zero owner address
  #+BEGIN_SRC solidity
function mint(address rcp, uint tid) internal;
  #+END_SRC

- Burn :: The =burn= function allows only the minter to destroy an existing NFT
  owned by an owner. The =burn= function emits the =Transfer= event with the
  zero recipient address
  #+BEGIN_SRC solidity
function burn(uint tid) internal;
  #+END_SRC

** Testing and usage

*** Testing =NFT= contract

Test the =NFT= contract
#+BEGIN_SRC nushell
forge test -vvv --match-contract NFT --match-test .
#+END_SRC
